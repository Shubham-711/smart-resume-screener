from marshmallow import fields, ValidationError
from .extensions import ma
from .models import Job, Resume, StatusEnum

# Custom field for Enum serialization/deserialization
class EnumField(fields.Field):
    """Custom Marshmallow field for Enums."""
    def _serialize(self, value, attr, obj, **kwargs):
        # Convert Enum member to its value (e.g., StatusEnum.PENDING -> 'PENDING')
        if value is None:
            return None
        return value.value

    def _deserialize(self, value, attr, data, **kwargs):
        # Convert string value back to Enum member
        try:
            return StatusEnum(value) # Adjust this if using other enums
        except ValueError as e:
            # Raise validation error if the input string isn't a valid enum value
            valid_values = [item.value for item in StatusEnum] # Adjust for other enums
            raise ValidationError(f"Invalid status value '{value}'. Must be one of: {valid_values}") from e


class ResumeSchema(ma.SQLAlchemyAutoSchema):
    status = EnumField(attribute="status") # Use custom field for status enum
    # Define job relationship if you want to nest job info (usually not needed for list view)
    # job = fields.Nested('JobSchema', only=("id", "title"))

    class Meta:
        model = Resume
        load_instance = True # Deserialize to model instances
        # Specify fields to include in the API response
        # Add component scores if you store them in the model and want them in API
        fields = ("id", "filename", "status", "score", "uploaded_at", "job_id",
                  # "semantic_score", "skill_score", "experience_score", # Uncomment if stored
                 )
        # Fields generated by the server or read-only
        dump_only = ("id", "uploaded_at", "score", "status",
                     # "semantic_score", "skill_score", "experience_score" # Uncomment if stored
                    )

class JobSchema(ma.SQLAlchemyAutoSchema):
    # Example of nesting resumes - useful for GET /api/jobs/<id> maybe, but not POST/PUT
    # resumes = fields.Nested(ResumeSchema, many=True, dump_only=True, only=("id", "filename", "score", "status"))

    class Meta:
        model = Job
        load_instance = True
        # Specify fields to include in the API response
        # Include required_experience if added to model
        fields = ("id", "title", "description", "created_at") # Exclude resumes by default
        dump_only = ("id", "created_at") # Read-only fields

# Instantiate schemas for use in routes (single item and list)
job_schema = JobSchema()
jobs_schema = JobSchema(many=True)
resume_schema = ResumeSchema()
resumes_schema = ResumeSchema(many=True)